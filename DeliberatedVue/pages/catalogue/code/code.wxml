<!--pages/catalogue/code/code.wxml-->
<modal id = "modal" hidden = "{{hiddenmodalput}}" confirm-text = "确定" cancel-text = "取消" bindcancel = "cancel" bindconfirm = "confirm" > 
  <textarea type = 'text' class="comment" placeholder = "请输入注释" auto - focus></textarea>  
</modal> 
<view class="func">
  <image class="add" src="/icon/add.png" mode="aspectFit" bindtap="addcomment"/>
  <image class="view" src="/icon/view.png" mode="aspectFit" bindtap="gotocomment"/>
  <image class="question" src="/icon/question.png" mode="aspectFit" bindtap="gotoquestion"/>
</view>
<view class="code">
  <text user-select="true">function patchVnode(
  oldVnode,
  vnode,
  insertedVnodeQueue,
  ownerArray,
  index,
  removeOnly
) {
  // 老节点和新节点相同，直接返回
  if (oldVnode === vnode) {
    return
  }
  if (isDef(vnode.elm) && isDef(ownerArray)) {
    // clone reused vnode
    vnode = ownerArray[index] = cloneVNode(vnode)
  }

  const elm = vnode.elm = oldVnode.elm

  // 异步占位符节点
  if (isTrue(oldVnode.isAsyncPlaceholder)) {
    if (isDef(vnode.asyncFactory.resolved)) {
      hydrate(oldVnode.elm, vnode, insertedVnodeQueue)
    } else {
      vnode.isAsyncPlaceholder = true
    }
    return
  }

  // 跳过静态节点的更新
  // reuse element for static trees.
    isTrue(oldVnode.isStatic) &&vnode.key === oldVnode.key &&
    (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
  ) {
    // 新旧节点都是静态的而且两个节点的 key 一样，并且新节点被 clone 了 或者 新节点有 v-once指令，则重用这部分节点
    vnode.componentInstance = oldVnode.componentInstance
    return
  }

  // 执行组件的 prepatch 钩子
  let i
  const data = vnode.data
  if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
    i(oldVnode, vnode)
  }</text>
</view>
